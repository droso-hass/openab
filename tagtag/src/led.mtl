
const RGB_BLACK = 0x000000;;
type Led=[next_change index size colors intervals];;
var leds;;

fun ledInit = 
    set leds = tabnew nil 5;
    for i = 0; i < 5 do (
        set leds.i = [next_change: -1 index: 0 size: 1 colors: {RGB_BLACK} intervals: {0}];
        led i RGB_BLACK
    );;

fun ledHandler data t =
    let rev split data ";" nil nil -> c1 in
    let atoi hd c1 -> led_id in
    let tl c1 -> c2 in
    let atoi hd c2 -> start_after in
    let tl c2 -> c3 in
    let (listlen c3) / 2 -> size in
    let tabnew nil size -> colors in
    let tabnew nil size -> intervals in
    let 0 -> cpt in (
        for l=c3; l!=nil; tl tl l do (
            set colors.cpt = htoi hd l;
            set intervals.cpt = atoi hd tl l;
            set cpt = cpt+1
        );
        set leds.led_id = [next_change: t+start_after index: 0 size: size colors: colors intervals: intervals]
    );
    /*let leds.1 -> l in (
        Iecholn l.size;
        Iecholn l.index;
        for i = 0; i<l.size do Iecholn l.colors.i
    );*/
    0;;

fun ledLoop =
    for i = 0; i < 5 do (
        let leds.i -> l in (
            if l.next_change != -1 && time_ms >= l.next_change then (
                let l.index -> j in (
                    led i l.colors.j;
                    if l.intervals.j == 0 then 
                        set leds.i = [next_change: -1 index: 0 size: l.size colors: l.colors intervals: l.intervals]
                    else
                        set leds.i = [next_change: time_ms+l.intervals.j index: (j+1)%l.size size: l.size colors: l.colors intervals: l.intervals]
                )
            )
        ) 
    );;
