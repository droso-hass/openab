asyncapi: 3.0.0
info:
  title: OPENAB API
  version: 1.0.0
  description: NATS API for the OpenNab server
  contact:
    name: Github
    url: https://github.com/droso-hass/openab/
  externalDocs:
    url: https://droso-hass.github.io/openab
  license:
    name: MIT License
    url: https://choosealicense.com/licenses/mit/
channels:
  setLed:
    address: openab.{mac}.led
    messages:
      ledData:
        $ref: '#/components/messages/ledData'
  setEar:
    address: openab.{mac}.ear
    messages:
      ledData:
        $ref: '#/components/messages/earData'
  getEar:
    address: openab.{mac}.ear.state
    messages:
      earEventData:
        $ref: '#/components/messages/earEventData'
  reboot:
    address: openab.{mac}.reboot
  playData:
    address: openab.{mac}.player.data
    messages:
      audio:
        $ref: '#/components/messages/audioData'
  playState:
    address: openab.{mac}.player.state
    messages:
      audio:
        $ref: '#/components/messages/audioEventData'
  playCmd:
    address: openab.{mac}.player.command
    messages:
      audio:
        $ref: '#/components/messages/audioCmdData'
  recCmd:
    address: openab.{mac}.recorder.command
    messages:
      audio:
        $ref: '#/components/messages/audioCmdData'
  recData:
    address: openab.{mac}.recorder.data
    messages:
      audio:
        $ref: '#/components/messages/audioData'
  button:
    address: openab.{mac}.button
    messages:
      buttonData:
        $ref: '#/components/messages/buttonData'
  rfid:
    address: openab.{mac}.rfid
    messages:
      rfidData:
        $ref: '#/components/messages/rfidData'
  status:
    address: openab.{mac}.status
    messages:
      infoData:
        $ref: '#/components/messages/infoData'
    bindings:
      nats:
        retain: true
operations:
  setLed:
    action: send
    channel:
      $ref: '#/channels/setLed'
    summary: Set Leds data for a nabaztag
  setEar:
    action: send
    channel:
      $ref: '#/channels/setEar'
    summary: Set Ears data for a nabaztag
  getEar:
    action: receive
    channel:
      $ref: '#/channels/getEar'
    summary: Ear events sent when the end user manually moves the ears
  reboot:
    action: send
    channel:
      $ref: '#/channels/reboot'
    summary: Reboot the device
  setPlayerData:
    action: send
    channel:
      $ref: '#/channels/playData'
    summary: Send chunks of audio to the player
  setPlayer:
    action: send
    channel:
      $ref: '#/channels/playCmd'
    summary: Commands sent to the player
  getPlayerEvents:
    action: send
    channel:
      $ref: '#/channels/playState'
    summary: Events changes sent by the player
  getRecorderData:
    action: receive
    channel:
      $ref: '#/channels/recData'
    summary: Get recorded audio
  setRecorder:
    action: send
    channel:
      $ref: '#/channels/recCmd'
    summary: Start/stop the recorder
  getButton:
    action: receive
    channel:
      $ref: '#/channels/button'
    summary: Get button events
  rfid:
    action: receive
    channel:
      $ref: '#/channels/rfid'
    summary: RFID Tag read
  status:
    action: receive
    channel:
      $ref: '#/channels/status'
    summary: When a rabbit connects/disconnects to/from the server
components:
  messages:
    audioData:
      summary: audio data (for recorder encoded in pcm16)
      payload:
        type: string
        description: raw binary audio data
    audioCmdData:
      summary: Player/Recorder status data
      payload:
        type: object
        additionalProperties: false
        properties:
          state:
            type: integer
            description: "1 if stopped, 2 if playing"
            enum:
              - 1
              - 2
          link:
            type: string
          volume:
            type: integer
            min: 0
            max: 255
    audioEventData:
      summary: Audio Event Data
      payload:
        type: object
        additionalProperties: false
        properties:
          state:
            type: integer
            description: "1 if stopped, 2 if playing"
            enum:
              - 1
              - 2
    ledData:
      summary: Nabaztag Led Control
      description: Led control sequence sent to a nabaztag
      payload:
        $ref: '#/components/schemas/ledData'
    earData:
      summary: Nabaztag Ear Control
      description: Ear control sequence sent to a nabaztag
      payload:
        $ref: '#/components/schemas/earData'
    earEventData:
      summary: Nabaztag Ear Move Event
      description: Sent when the ear are manually moved by the end user
      payload:
        type: object
        additionalProperties: false
        properties:
          id:
            $ref: '#/components/schemas/earId'
          position:
            $ref: '#/components/schemas/earPos'
    buttonData:
      summary: Button data
      payload:
        type: object
        additionalProperties: false
        properties:
          id:
            type: integer
            description: "0: single click, 1: double, 2: long start, 3: long stop, 4: volume"
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
          value:
            type: integer
            min: 0
            max: 255
    rfidData:
      summary: RFID tag id (hex encoded)
      payload:
        type: object
        additionalProperties: false
        properties:
          value:
            type: string
    infoData:
      summary: Rabbit status data
      payload:
        type: object
        additionalProperties: false
        properties:
          connected:
            type: boolean
          hwVersion:
            type: integer
            description: Nabaztag version
            enum:
              - 1
              - 2
              - 3
          ip:
            type: string
          fwVersion:
            type: string
            description: firmware version of the nabaztag (rootfs for karotz)
          swVersion:
            type: string
            description: >-
              version of the software running on the nabaztag (bootcode for
              tagtag, karotz_rs for karotz)
        required:
          - connected
          - hwVersion
  schemas:
    ledData:
      type: object
      additionalProperties: false
      properties:
        sequence:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              color:
                type: string
                description: Led color in hex format (6 digits)
              duration:
                type: integer
                description: duration of the effect (in miliseconds), use 0 to for infinite
                default: 0
            required:
              - color
        delay:
          type: integer
          description: delay before start
          default: 0
        id:
          type: integer
          description: >-
            led id (0 for nose or karotz), (1-3 for left to right), (4 for
            bottom)
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
        sync:
          $ref: '#/components/schemas/sync'
      required:
        - id
        - sequence
    earData:
      type: object
      additionalProperties: false
      properties:
        sequence:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              position:
                $ref: '#/components/schemas/earPos'
              direction:
                type: integer
                description: ear direction (0 for forward, 1 for backwards)
                default: 0
                enum:
                  - 0
                  - 1
              duration:
                type: integer
                description: delay until next effect (in miliseconds), use 0 to for none
                default: 0
            required:
              - color
        delay:
          type: integer
          description: delay before start
          default: 0
        id:
          $ref: '#/components/schemas/earId'
        sync:
          $ref: '#/components/schemas/sync'
      required:
        - id
        - sequence
    earId:
      type: integer
      description: ear id (0 for left, 1 for right)
      enum:
        - 0
        - 1
    earPos:
      type: integer
      description: Ear position
      min: 0
      max: 16
    sync:
      description: >-
        Sync object that can be used to execue commands (led and ear) at the
        same time on a device
      type: object
      additionalProperties: false
      properties:
        count:
          type: integer
          description: >-
            total number of commands expected (data is sent to the device once
            this number is reached)
        id:
          type: string
          description: id of this sync object, all commands with the same id will be synced
      required:
        - count
        - id
  parameters:
    mac:
      description: MAC Address of the nabaztag (without colons)
