type Button=[last_time last_state reported nbclick];;
var btn;;
var wheel;;
var lastRfid;;

fun eventsInit = 
    set lastRfid = 0;
    set btn = [last_time: 0 last_state: 0 reported: 1 nbclick: 0];
    set wheel = [last_time: 0 last_state: -1 reported: 1 nbclick: 0]
    ;;

fun buttonLoop = 
    let button3 -> w in
        if w != wheel.last_state then (
            set wheel = [last_time: time_ms last_state: w reported: 0 nbclick: 0];0
        )
        else if wheel.reported == 0 && wheel.last_time + 500 < time_ms then (
            set wheel = [last_time: wheel.last_time last_state: wheel.last_state reported: 1 nbclick: 0];
            writetcpconn strcatlist "10;"::(itoa wheel.last_state)::nil
        );
    
    let button2 -> b in (
        if b != btn.last_state then (
            if b == 0 then 
                set btn = [last_time: time_ms last_state: b reported: 0 nbclick: btn.nbclick]
            else
                set btn = [last_time: time_ms last_state: b reported: 0 nbclick: btn.nbclick+1]
        ) else if btn.reported == 0 && btn.last_time + 500 < time_ms then (
            if btn.last_state == 1 && btn.last_time + 600 < time_ms then (
                writetcpconn "04;3"; // long click
                set btn = [last_time: time_ms last_state: 1 reported: 1 nbclick: 0]
            )
            else if btn.nbclick > 1 then (
                writetcpconn "04;2"; // double click
                set btn = [last_time: time_ms last_state: 0 reported: 1 nbclick: 0]
            )
            else if btn.last_state == 0 then (
                writetcpconn "04;1"; // simple click
                set btn = [last_time: time_ms last_state: 0 reported: 1 nbclick: 0]
            )
        )
    )
    ;;
    

fun rfidLoop =
    if lastRfid + 100 < time_ms then (
        set lastRfid = time_ms;
        let rfidGet -> x in
        if x != nil && x != "ERROR" then (
            writetcpconn strcatlist "05;"::(strtohex x)::nil
        )
    );;