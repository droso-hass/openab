
//--------------------------------------------------------------------------------------------------
// TCP Socket Server
//--------------------------------------------------------------------------------------------------

fun tcpread cnx input=
  for l=split input "\n" nil; l!=nil; tl l do (
    let hd l -> msg in
    let time_ms -> t in
    let strsub msg 0 2 -> pktType in
        if !strcmp pktType "01" then
        (
          reboot 0x0407FE58 0x13fb6754;
          0
        )
        else if !strcmp pktType "02" then
        (
          earHandler strsub msg 3 nil t;
          0
        )
        else if !strcmp pktType "03" then
        (
          ledHandler strsub msg 3 nil t;
          0
        )
        else if !strcmp pktType "06" then
        (
          recorderHandler strsub msg 3 nil;
          0
        )
        else if !strcmp pktType "07" then
        (
          playerHandler strsub msg 3 nil;
          0
        )
        else if !strcmp pktType "08" then
        (
          recordDataHandler strsub msg 3 nil;
          0
        )
        else if !strcmp pktType "09" then
        (
          playDataHandler strsub msg 3 nil;
          0
        )
        else if !strcmp pktType "11" then
        (
          midiHandler strsub msg 3 nil;
          0
        )
        else
        (
          Secholn pktType;
          Secholn "unknown packet";
          0
        )
  );

    //let strcatlist "pong "::idx::nil -> data in 
    //writetcp cnx data 0;
    nil
    ;;

fun tcpevent cnx val msg=
    if val==TCPSTART then (
      set conn = cnx::conn;
      tcpread cnx msg
    ) else if val==TCPREAD then tcpread cnx msg
    else if val==TCPCLOSE then (
        set conn = remfromlist conn cnx;
        // when using the simulator, when reconnecting after a socket is closed
        // the system closes the connection, this is not an issue on real hardware
        closetcp cnx
    );
    0;;

fun cbsrv cnx code msg=
    tcpcb cnx #tcpevent;
    0;;

fun startsocketserver port=
    listentcp port #cbsrv;
    // led LED_NOSE RGB_BLUE;
    Secholn "start socket server";
    //let "a;b;cde;fg;hh\nquoi;coubeh\nbo;zuf;gluf" -> msg in
    //  for l=split msg "\n" nil; l!=nil; tl l do (
    //    dumpList rev split hd l ";" nil nil
    //  );
    0;;
