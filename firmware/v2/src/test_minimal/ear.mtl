
/*
    lastTime: last move request time
    targetPos: position to move to
    isMoving: if the ear is supposed to be moving
    isBroken: if the ear is broken
    
    lastPos: last position 
    lastPosTime: last time position changed
*/
type EarState=[lastTime targetPos isMoving isBroken lastPos lastPosTime reported];;
type Ear=[next_change index size positions directions intervals];;
var earState;;
var ears;;

fun earDump l = 
        Iecholn l.next_change;
        Iecholn l.size;
        Iecholn l.index;
        Secholn "pos";
        for i = 0; i<l.size do Iecholn l.positions.i;
        Secholn "dir";
        for i = 0; i<l.size do Iecholn l.directions.i;
        Secholn "int";
        for i = 0; i<l.size do Iecholn l.intervals.i
    ;;

fun earStateDump l = 
    Secholn strcatlist "lastTime:"::(itoa l.lastTime)::" targetPos:"::(itoa l.targetPos)::" isMoving:"::(itoa l.isMoving)::" isBroken:"::(itoa l.isBroken)::" lastPos:"::(itoa l.lastPos)::" lastPosTime:"::(itoa l.lastPosTime)::" reported:"::(itoa l.reported)::nil;;

fun earInit = 
    set ears = tabnew nil 2;
    set earState = tabnew nil 2;
    for i = 0; i < 2 do (
        set earState.i = [lastTime: 0 targetPos: 0 isMoving: 0 isBroken: 0 lastPos: 0 lastPosTime: 0 reported: 1];
        set ears.i = [next_change: -1 index: 0 size: 1 positions: {0} directions: {0} intervals: {0}]
    );
    earStateDump earState.0
    ;;

fun earHandler data t =
    Secholn "ear";
    let rev split data ";" nil nil -> c1 in
    let atoi hd c1 -> ear_id in
    let tl c1 -> c2 in
    let atoi hd c2 -> start_after in
    let tl c2 -> c3 in
    let (listlen c3) / 3 -> size in
    let tabnew nil size -> positions in
    let tabnew nil size -> directions in
    let tabnew nil size -> intervals in
    let 0 -> cpt in (
        for l=c3; l!=nil; tl tl tl l do (
            set positions.cpt = atoi hd l;
            set directions.cpt = atoi hd tl l;
            set intervals.cpt = atoi hd tl tl l;
            set cpt = cpt+1
        );
        set ears.ear_id = [next_change: t+start_after index: 0 size: size positions: positions directions: directions intervals: intervals]
    );
    earDump ears.1;
    0;;

fun earLoop =
    for i = 0; i < 2 do (
        Secholn strcatlist "ear"::(itoa i)::nil;

        let earState.i -> es in
        if es.isBroken != 1 then
            let motorget i -> state in
                if es.isMoving == 1 then (
                    // if moving
                    Secholn "moving";
                    if state == es.targetPos then (
                        Secholn "stopped ok";
                        // if reached requested state, stop motor
                        set earState.i = [lastTime: es.lastTime targetPos: es.targetPos isMoving: 0 isBroken: es.isBroken lastPos: state lastPosTime: time_ms reported: 1];
                        motorset i 0
                    ) else if time_ms >= es.lastTime + 5000 then (
                        Secholn "stopped fail";
                        // if moving for more than 5s (and target state not reached), mark ear as broken
                        set earState.i = [lastTime: time_ms targetPos: 0 isMoving: 0 isBroken: 1 lastPos: 0 lastPosTime: 0 reported: 1];
                        motorset i 0
                    )
                )
                else (
                    if state != es.lastPos then (
                        // if state changed, update lastPos/lastPosTime
                        Secholn "state changed";
                        Iecholn state;
                        Iecholn es.lastPos;
                        //earStateDump es;
                        set earState.i = [lastTime: es.lastTime targetPos: es.targetPos isMoving: es.isMoving isBroken: es.isBroken lastPos: state lastPosTime: time_ms reported: 0]
                        ;0
                    )
                    else (
                        if es.reported == 0 && es.lastPosTime + 500 < time_ms then (
                            Secholn "reporting change";
                            // if last state have changed but is stable for 500ms, send update to server
                            writetcpconn strcatlist "12;"::(itoa es.lastPos)::nil;
                            set earState.i = [lastTime: es.lastTime targetPos: es.targetPos isMoving: es.isMoving isBroken: es.isBroken lastPos: es.lastPos lastPosTime: es.lastPosTime reported: 1]
                        );
                        
                        // follow defined patterns (similar to led)
                        let ears.i -> e in (
                            if e.next_change != -1 && time_ms >= e.next_change then (
                                Secholn "executing step";
                                let e.index -> j in (
                                    // start moving to e.positions.j with e.directions.j 
                                    set earState.i =  [lastTime: time_ms targetPos: e.positions.j isMoving: 1 isBroken: es.isBroken lastPos: es.lastPos lastPosTime: es.lastPosTime reported: es.reported];
                                    motorset i if e.directions.j == 1 then 1 else -1;
                                    Secholn "started";

                                    // update next step
                                    if e.intervals.j == 0 then 
                                        set ears.i = [next_change: -1 index: 0 size: e.size positions: e.positions directions: e.directions intervals: e.intervals]
                                    else
                                        set ears.i = [next_change: time_ms+e.intervals.j index: (j+1)%e.size size: e.size positions: e.positions directions: e.directions intervals: e.intervals]
                                )
                            )
                        );0
                    )
                )
    );;
